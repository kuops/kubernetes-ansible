---
- stat: path={{ kube_cm_config }}
  register: cm_config_result

- name: 生成 controller-manager scheduler 组件 kubeconfig 文件
  when: not cm_config_result.stat.exists
  command: "{{ item }}"
  become: true
  register:  generate_config
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true
  with_items:
    - "/usr/local/bin/kubectl config set-cluster {{ cluster_name }} --certificate-authority={{ ca_cert }} --embed-certs=true --server={{ kube_apiserver }} --kubeconfig={{ kube_cm_config }} "
    - "/usr/local/bin/kubectl config set-credentials {{ cm_user }} --client-certificate={{ sa_cert }} --client-key={{ sa_key }} --embed-certs=true --kubeconfig={{ kube_cm_config }} "
    - "/usr/local/bin/kubectl config set-context {{ cm_user }}@{{ cluster_name }} --cluster={{ cluster_name }} --user={{ cm_user }} --kubeconfig={{ kube_cm_config }}"
    - "/usr/local/bin/kubectl config use-context {{ cm_user }}@{{ cluster_name }} --kubeconfig={{ kube_cm_config }}"
    - "/usr/local/bin/kubectl config set-cluster {{ cluster_name }} --certificate-authority={{ ca_cert }} --embed-certs=true --server={{ kube_apiserver }} --kubeconfig={{ kube_scheduler_config }}"
    - "/usr/local/bin/kubectl config set-credentials {{ scheduler_user }} --client-certificate={{ kube_scheduler_cert }} --client-key={{ kube_scheduler_key }} --embed-certs=true --kubeconfig={{ kube_scheduler_config }}"
    - "/usr/local/bin/kubectl config set-context {{ scheduler_user }}@{{ cluster_name }} --cluster={{ cluster_name }} --user={{ scheduler_user }} --kubeconfig={{ kube_scheduler_config }}"
    - "/usr/local/bin/kubectl config use-context {{ scheduler_user }}@{{ cluster_name }} --kubeconfig={{ kube_scheduler_config }}"


- stat: path={{ ansible_env.HOME }}/.kube/config
  become: true
  become_user: root
  register: admin_conf_result


- name: 生成 admin kubeconfig 文件
  become: true
  become_user: root
  when: not admin_conf_result.stat.exists
  command: "{{ item }}"
  register:  generate_admin_config
  delegate_to: "{{ groups['master'][0] }}"
  run_once: true
  with_items:
    - "/usr/local/bin/kubectl config set-cluster {{ cluster_name }} --certificate-authority={{ ca_cert }} --embed-certs=true --server={{ kube_apiserver }}"
    - "/usr/local/bin/kubectl config set-credentials {{ admin_user }} --client-certificate={{ admin_cert }} --client-key={{ admin_key }} --embed-certs=true"
    - "/usr/local/bin/kubectl config set-context {{ admin_user }}@{{ cluster_name }} --cluster={{ cluster_name }} --user={{ admin_user }}"
    - "/usr/local/bin/kubectl config use-context {{ admin_user }}@{{ cluster_name }}"

- name: 分发到其他节点
  synchronize:
    mode: push
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    rsync_opts:
    - "--rsh=/bin/ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no -i /vagrant/files/ssh-keys/id_rsa"
    #rsync_path: "su -c rsync"
  with_items:
    - { src: "{{ kube_scheduler_config }}", dest: "{{ kube_scheduler_config }}" }
    - { src: "{{ kube_cm_config }}", dest: "{{ kube_cm_config }}" }
    - { src: "{{ ansible_env.HOME }}/.kube/", dest: "{{ ansible_env.HOME }}/.kube/" }
  delegate_to: "{{ groups['master'][0] }}"
