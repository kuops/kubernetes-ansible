---
- name: Check kubeconfig admin.conf exists
  stat:
    path: "{{ kubernetes_kubeconfig_admin_conf }}"
  register: kubeconfig_admin_conf_stat

- name: Generator kubeconfig admin.conf
  shell: |
    kubectl config set-cluster {{ kubernetes_cluster_name }} \
      --certificate-authority={{ kubernetes_ca_cert }} \
      --embed-certs=true \
      --server={{ kubernetes_apiserver_lb_url }} \
      --kubeconfig={{ kubernetes_kubeconfig_admin_conf }}

    kubectl config set-credentials {{ item.kube_user }} \
      --client-certificate={{ kubernetes_kubeconfig_admin_cert }} \
      --client-key={{ kubernetes_kubeconfig_admin_key }} \
      --embed-certs=true \
      --kubeconfig={{ kubernetes_kubeconfig_admin_conf }}

    kubectl config set-context {{ item.kube_user }}@{{ kubernetes_cluster_name }} \
      --cluster={{ kubernetes_cluster_name }} \
      --user={{ item.kube_user }} \
      --kubeconfig={{ kubernetes_kubeconfig_admin_conf }}

    kubectl config use-context {{ item.kube_user }}@{{ kubernetes_cluster_name }} \
      --kubeconfig={{ kubernetes_kubeconfig_admin_conf }}
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
  with_items:
  - { kube_user: "kubernetes-admin" }
  when: not kubeconfig_admin_conf_stat.stat.exists

- name: Create ~/.kube directory
  file:
    path: "{{ ansible_env.HOME }}/.kube"
    state: directory

- name: Copy kubeconfig admin.conf to ~/.kube/config
  copy:
    src: "{{ kubernetes_kubeconfig_admin_conf }}"
    dest: "{{ ansible_env.HOME }}/.kube/config"
    owner: root
    group: root
    mode: '0644'
    remote_src: yes

- name: Check kubeconfig kubelet.conf exists
  stat:
    path: "{{ kubernetes_kubeconfig_kubelet_conf }}"
  register: kubeconfig_kubelet_conf_stat

- name: Generator kubeconfig kubelet.conf
  shell: |
    kubectl config set-cluster {{ kubernetes_cluster_name }} \
      --certificate-authority={{ kubernetes_ca_cert }} \
      --embed-certs=true \
      --server={{ kubernetes_apiserver_lb_url }} \
      --kubeconfig={{ kubernetes_kubeconfig_kubelet_conf }}

    kubectl config set-credentials {{ item.kube_user }} \
      --client-certificate={{ kubernetes_kubeconfig_kubelet_cert }} \
      --client-key={{ kubernetes_kubeconfig_kubelet_key }} \
      --embed-certs=true \
      --kubeconfig={{ kubernetes_kubeconfig_kubelet_conf }}

    kubectl config set-context {{ item.kube_user }}@{{ kubernetes_cluster_name }} \
      --cluster={{ kubernetes_cluster_name }} \
      --user={{ item.kube_user }} \
      --kubeconfig={{ kubernetes_kubeconfig_kubelet_conf }}

    kubectl config use-context {{ item.kube_user }}@{{ kubernetes_cluster_name }} \
      --kubeconfig={{ kubernetes_kubeconfig_kubelet_conf }}
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
  with_items:
  - { kube_user: 'system:node:{{ ansible_hostname }}' }
  when: not kubeconfig_kubelet_conf_stat.stat.exists

- name: Check kubeconfig controller-manager.conf exists
  stat:
    path: "{{ kubernetes_kubeconfig_controller_manager_conf }}"
  register: kubeconfig_controller_manager_conf_stat

- name: Generator kubeconfig controller-manager.conf
  shell: |
    kubectl config set-cluster {{ kubernetes_cluster_name }} \
      --certificate-authority={{ kubernetes_ca_cert }} \
      --embed-certs=true \
      --server={{ kubernetes_apiserver_lb_url }} \
      --kubeconfig={{ kubernetes_kubeconfig_controller_manager_conf }}

    kubectl config set-credentials {{ item.kube_user }} \
      --client-certificate={{ kubernetes_kubeconfig_controller_manager_cert }} \
      --client-key={{ kubernetes_kubeconfig_controller_manager_key }} \
      --embed-certs=true \
      --kubeconfig={{ kubernetes_kubeconfig_controller_manager_conf }}

    kubectl config set-context {{ item.kube_user }}@{{ kubernetes_cluster_name }} \
      --cluster={{ kubernetes_cluster_name }} \
      --user={{ item.kube_user }} \
      --kubeconfig={{ kubernetes_kubeconfig_controller_manager_conf }}

    kubectl config use-context {{ item.kube_user }}@{{ kubernetes_cluster_name }} \
      --kubeconfig={{ kubernetes_kubeconfig_controller_manager_conf }}
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
  with_items:
  - { kube_user: 'system:kube-controller-manager' }
  when: not kubeconfig_controller_manager_conf_stat.stat.exists

- name: Check kubeconfig scheduler.conf exists
  stat:
    path: "{{ kubernetes_kubeconfig_scheduler_conf }}"
  register: kubeconfig_scheduler_conf_stat

- name: Generator kubeconfig scheduler.conf
  shell: |
    kubectl config set-cluster {{ kubernetes_cluster_name }} \
      --certificate-authority={{ kubernetes_ca_cert }} \
      --embed-certs=true \
      --server={{ kubernetes_apiserver_lb_url }} \
      --kubeconfig={{ kubernetes_kubeconfig_scheduler_conf }}

    kubectl config set-credentials {{ item.kube_user }} \
      --client-certificate={{ kubernetes_kubeconfig_scheduler_cert }} \
      --client-key={{ kubernetes_kubeconfig_scheduler_key }} \
      --embed-certs=true \
      --kubeconfig={{ kubernetes_kubeconfig_scheduler_conf }}

    kubectl config set-context {{ item.kube_user }}@{{ kubernetes_cluster_name }} \
      --cluster={{ kubernetes_cluster_name }} \
      --user={{ item.kube_user }} \
      --kubeconfig={{ kubernetes_kubeconfig_scheduler_conf }}

    kubectl config use-context {{ item.kube_user }}@{{ kubernetes_cluster_name }} \
      --kubeconfig={{ kubernetes_kubeconfig_scheduler_conf }}
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
  with_items:
  - { kube_user: 'system:kube-scheduler' }
  when: not kubeconfig_scheduler_conf_stat.stat.exists
